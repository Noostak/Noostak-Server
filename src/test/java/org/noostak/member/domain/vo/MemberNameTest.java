package org.noostak.member.domain.vo;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.NullAndEmptySource;
import org.noostak.member.common.MemberErrorCode;
import org.noostak.member.common.MemberException;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static org.assertj.core.api.AssertionsForClassTypes.assertThatThrownBy;

class MemberNameTest {

    @Nested
    @DisplayName("ÏÑ±Í≥µ ÏºÄÏù¥Ïä§")
    class SuccessCases {

        @ParameterizedTest
        @DisplayName("Ïú†Ìö®Ìïú Ïù¥Î¶ÑÏúºÎ°ú Í∞ùÏ≤¥ ÏÉùÏÑ±")
        @CsvSource({
                "Alice",
                "ÌïúÍ∏ÄÏù¥Î¶Ñ",
                "JohnDoe",
                "ÏòÅÌïúÌòºÌï©",
                "ÌôçÍ∏∏Îèô",
                "ÌôçÍ∏∏Îèôüòä",
                "üòÄÌôçÍ∏∏Îèô",
                "AliceüòÄÌôçÍ∏∏Îèô"
        })
        void shouldCreateMemberNameSuccessfully(String validName) {
            // Given & When
            MemberName memberName = MemberName.from(validName);

            // Then
            assertThat(memberName.value()).isEqualTo(validName);
        }
    }

    @Nested
    @DisplayName("Ïã§Ìå® ÏºÄÏù¥Ïä§")
    class FailureCases{

            @ParameterizedTest
            @DisplayName("Ïù¥Î¶ÑÏù¥ nullÏù¥Í±∞ÎÇò ÎπÑÏñ¥ ÏûàÎäî Í≤ΩÏö∞")
            @NullAndEmptySource
            void shouldThrowExceptionForNullOrEmptyName(String invalidName) {
                // Given & When & Then
                assertThatThrownBy(() -> MemberName.from(invalidName))
                        .isInstanceOf(MemberException.class)
                        .hasMessageContaining(MemberErrorCode.MEMBER_NAME_NOT_EMPTY.getMessage());
            }

            @ParameterizedTest
            @DisplayName("Ïù¥Î¶ÑÏùò Í∏∏Ïù¥Í∞Ä 15ÏûêÎ•º Ï¥àÍ≥ºÌïòÎäî Í≤ΩÏö∞")
            @CsvSource({
                    "abcdefghijklmnop",
                    "Ïù¥Î™®ÏßÄÏôÄÎ¨∏ÏûêÍ∞ÄÌòºÌï©ÎêúÏù¥Î¶ÑÏûÖÎãàÎã§üòäüòäüòäüòä"
            })
            void shouldThrowExceptionForNameLengthExceeded(String invalidName) {
                // Given & When & Then
                assertThatThrownBy(() -> MemberName.from(invalidName))
                        .isInstanceOf(MemberException.class)
                        .hasMessageContaining(MemberErrorCode.MEMBER_NAME_LENGTH_EXCEEDED.getMessage());
            }

            @ParameterizedTest
            @DisplayName("Ïù¥Î¶ÑÏóê ÌäπÏàòÎ¨∏ÏûêÍ∞Ä Ìè¨Ìï®Îêú Í≤ΩÏö∞")
            @CsvSource({
                    "Alice!",
                    "Alice@",
                    "Alice#",
                    "Alice$",
                    "Alice%",
                    "Alice^",
                    "Alice&",
                    "Alice*",
                    "Alice(",
                    "Alice)",
                    "Alice_",
                    "Alice+",
                    "Alice=",
                    "Alice|",
                    "Alice<",
                    "Alice>",
                    "Alice?",
                    "Alice{",
                    "Alice}",
                    "Alice[",
                    "Alice]",
                    "Alice~",
                    "Alice-"
            })
            void shouldThrowExceptionForInvalidCharacter(String invalidName) {
                // Given & When & Then
                assertThatThrownBy(() -> MemberName.from(invalidName))
                        .isInstanceOf(MemberException.class)
                        .hasMessageContaining(MemberErrorCode.MEMBER_NAME_INVALID_CHARACTER.getMessage());
            }
    }
}